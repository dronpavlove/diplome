# Generated by Django 4.0.1 on 2022-07-13 12:36

import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import orders.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='DeliverySetting',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=20, verbose_name='Настройка доставки')),
                ('limit_price_free', models.PositiveIntegerField(default=2000, help_text='Установите цену, при которой сумма товаров в корзине даст клиенту на бесплатную доставку', verbose_name='Минимальная цена для бесплатной доставки')),
                ('express_delivery_price', models.PositiveIntegerField(default=500, verbose_name='Цена экспресс доставки')),
                ('delivery_price', models.PositiveIntegerField(default=200, help_text='Если сумма товаров меньше определенной суммы или действует условие, что товары от разных продавцом', verbose_name='Цена обычной доставки')),
                ('is_active', models.BooleanField(default=True, verbose_name='Статус')),
            ],
            options={
                'verbose_name': 'настройка тарифа доставки',
                'verbose_name_plural': 'настройка тарифов доставки',
                'db_table': 'DeliverySetting',
            },
        ),
        migrations.CreateModel(
            name='OrderCopyProduct',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=1000, verbose_name='название товара')),
                ('product_pk', models.IntegerField(verbose_name='id_товара')),
                ('description', models.CharField(blank=True, max_length=255, verbose_name='описание товара')),
                ('price', models.DecimalField(decimal_places=2, default=1, max_digits=12, verbose_name='цена')),
                ('photo', models.ImageField(upload_to='', verbose_name=models.ImageField(blank=True, null=True, upload_to=orders.models.order_copy_product_directory_path, verbose_name='фотография'))),
            ],
            options={
                'db_table': 'OrderCopyProduct',
            },
        ),
        migrations.CreateModel(
            name='OrderProductBasket',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('count', models.IntegerField(default=1, verbose_name='Сколько товара')),
                ('seller', models.CharField(blank=True, max_length=100, verbose_name='Продавец')),
                ('created_dt', models.DateField(auto_now_add=True)),
                ('price', models.DecimalField(decimal_places=2, max_digits=9, verbose_name='Стоимость после скидки')),
                ('old_price', models.DecimalField(blank=True, decimal_places=2, max_digits=9, null=True, verbose_name='Стоимость ')),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='order_product_copy', related_query_name='client_products_basket', to='orders.ordercopyproduct')),
            ],
            options={
                'db_table': 'OrderProductBasket',
                'ordering': ('-created_dt',),
            },
        ),
        migrations.CreateModel(
            name='Order',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_dt', models.DateField(auto_now_add=True)),
                ('first_name', models.CharField(default='', max_length=20, verbose_name='Имя')),
                ('last_name', models.CharField(default='', max_length=20, verbose_name='Фамилия')),
                ('patronymic', models.CharField(default='', error_messages={'max_length': 'Слишком длинное Отчество!'}, max_length=20, verbose_name='Отчество')),
                ('delivery', models.CharField(choices=[('Обычная доставка', 'Обычная доставка'), ('Экспресс доставка', 'Экспресс доставка (+500 руб.)')], db_index=True, default='Обычная доставка', max_length=50, verbose_name='Способ доставки')),
                ('city', models.CharField(default='', max_length=30, verbose_name='Город')),
                ('address', models.TextField(default='', verbose_name='Адрес')),
                ('payment', models.CharField(choices=[('Онлайн картой', 'Онлайн картой'), ('Онлайн со случайного чужого счета', 'Онлайн со случайного чужого счета')], db_index=True, default='Онлайн картой', max_length=50, verbose_name='Способ оплаты')),
                ('total_price', models.DecimalField(decimal_places=2, default=0, max_digits=9, verbose_name='Сумма заказа')),
                ('status_pay', models.BooleanField(default=False, verbose_name='Статус оплаты')),
                ('need_pay', models.BooleanField(default=False, verbose_name='Флаг, что нужно поставить в очередь на оплату')),
                ('error_pay', models.CharField(max_length=300, null=True, verbose_name='Ошибки, если оплата не прошла')),
                ('transaction', models.PositiveBigIntegerField(null=True, unique=True, verbose_name='Номер транзакции оплаты')),
                ('number_visa', models.CharField(blank=True, max_length=30, null=True, verbose_name='Номер карты оплаты')),
                ('number_order', models.IntegerField(default=1, verbose_name='Номер заказа')),
                ('email', models.EmailField(max_length=254, verbose_name='email')),
                ('phone', models.CharField(max_length=16, null=True, validators=[django.core.validators.RegexValidator(message='Введите корректный номер, без пробелов (+79999999999)', regex='^\\+?7?\\d{8,15}$')], verbose_name='контактный номер')),
                ('delivery_price', models.DecimalField(decimal_places=2, default=0, max_digits=9, verbose_name='цена доставки')),
                ('order_products', models.ManyToManyField(related_name='order_products', to='orders.OrderProductBasket', verbose_name='товары для заказа')),
            ],
            options={
                'verbose_name': 'заказ',
                'verbose_name_plural': 'заказы',
                'db_table': 'Orders',
                'ordering': ['-number_order'],
            },
        ),
    ]
